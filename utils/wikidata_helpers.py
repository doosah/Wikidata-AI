# utils/wikidata_helpers.py  (–ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—ã–π –∫–æ–¥)
import requests, itertools, re
from datetime import datetime
from typing import List, Dict, Optional

HEADERS = {"User-Agent": "FreeTextWikidataBot/1.0 (https://example.com; admin@example.com)"}
API = "https://www.wikidata.org/w/api.php"
WIKIDATA_ITEM = "https://www.wikidata.org/entity/{qid}"

# ---------- –±–∞–∑–æ–≤—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ----------
def wd_get(url: str, params: dict, timeout=8):
    return requests.get(url, params, headers=HEADERS, timeout=timeout).json()

def label_for(qid: str, lang: str = "ru") -> str:
    """–ö–µ—à–∏—Ä—É–µ–º –ª–µ–π–±–ª—ã, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã."""
    if not hasattr(label_for, "_cache"):
        label_for._cache = {}
    if qid in label_for._cache:
        return label_for._cache[qid]
    data = wd_get(API, {"action": "wbgetentities", "ids": qid, "props": "labels",
                        "languages": f"{lang}|en", "format": "json"})
    lbl = (data["entities"].get(qid, {}).get("labels", {}).get(lang) or
           data["entities"].get(qid, {}).get("labels", {}).get("en") or
           {}).get("value", qid)
    label_for._cache[qid] = lbl
    return lbl

# ---------- –ø–æ–∏—Å–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π ----------
def search_entities(query: str, lang: str = "ru", limit: int = 5) -> List[Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π {'qid': '..', 'label': '..', 'descr': '..'}"""
    params = {"action": "wbsearchentities", "search": query, "language": lang,
              "uselang": lang, "format": "json", "limit": limit}
    data = wd_get(API, params)
    results = []
    for item in data.get("search", []):
        results.append({"qid": item["id"],
                        "label": item.get("label", ""),
                        "descr": item.get("description", "")})
    # –µ—Å–ª–∏ —Ä—É—Å—Å–∫–∏–π –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Äì –ø—Ä–æ–±—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    if not results and lang != "en":
        return search_entities(query, "en", limit)
    return results

# ---------- —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π ¬´—á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π¬ª —Å–±–æ—Ä —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π ----------
def free_text_description(qid: str, lang: str = "ru") -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ, –Ω–æ —á–∏—Ç–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ."""
    ent = wd_get(API, {"action": "wbgetentities", "ids": qid,
                       "languages": f"{lang}|en", "props": "labels|descriptions|claims",
                       "format": "json"})["entities"].get(qid, {})
    if not ent:
        return "–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."

    name = (ent.get("labels", {}).get(lang) or ent.get("labels", {}).get("en") or {}).get("value", qid)
    descr = (ent.get("descriptions", {}).get(lang) or ent.get("descriptions", {}).get("en") or {}).get("value", "")

    lines = [f"**{name}** ‚Äî {descr}." if descr else f"**{name}**"]

    claims = ent.get("claims", {})
    # –ø–æ–∫–∞–∂–µ–º –º–∞–∫—Å–∏–º—É–º 6 ¬´—Å–∞–º—ã—Ö –ø–æ–Ω—è—Ç–Ω—ã—Ö¬ª —Å–≤–æ–π—Å—Ç–≤
    wanted_props = ["P31", "P106", "P569", "P570", "P19", "P27", "P571", "P112",
                    "P159", "P856", "P800", "P166", "P131", "P2048", "P18"]
    for prop in wanted_props:
        if len(lines) > 8:  # –Ω–µ —Ä–∞–∑–¥—É–≤–∞—Ç—å
            break
        vals = get_claim_values(claims, prop, lang)
        if vals:
            prop_name = label_for(prop, lang)
            lines.append(f"**{prop_name}:** {', '.join(vals[:3])}{' ‚Ä¶' if len(vals)>3 else ''}")

    lines.append(f"\n[üîó –ò—Å—Ç–æ—á–Ω–∏–∫]({WIKIDATA_ITEM.format(qid=qid)})")
    return "\n".join(lines)

def get_claim_values(claims: dict, prop: str, lang: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å–≤–æ–π—Å—Ç–≤–∞."""
    if prop not in claims:
        return []
    out = []
    for c in claims[prop]:
        try:
            mainsnak = c["mainsnak"]
            if mainsnak.get("snaktype") != "value":
                continue
            dt = mainsnak["datatype"]
            val = mainsnak["datavalue"]["value"]
            if dt == "wikibase-item":
                out.append(label_for(val["id"], lang))
            elif dt == "time":
                out.append(human_date(val["time"]))
            elif dt in {"string", "external-id", "url"}:
                out.append(val)
            elif dt == "quantity":
                amount = val["amount"].lstrip("+")
                if val.get("unit") and val["unit"] != "http://www.wikidata.org/entity/Q199":
                    unit_qid = val["unit"].split("/")[-1]
                    amount += " " + label_for(unit_qid, lang)
                out.append(amount)
            else:
                out.append(str(val))
        except Exception:
            continue
    # —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ + –±–µ–∑ –ø—É—Å—Ç—ã—Ö
    return list(dict.fromkeys(filter(None, out)))

def human_date(ts: str) -> str:
    """+1835-12-31T00:00:00Z -> 31 –¥–µ–∫–∞–±—Ä—è 1835 –≥–æ–¥–∞"""
    if not ts.startswith("+"):
        return ts
    try:
        d = datetime.strptime(ts[1:11], "%Y-%m-%d")
        months = ["—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
                  "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"]
        return f"{d.day} {months[d.month-1]} {d.year} –≥–æ–¥–∞"
    except Exception:
        return ts[1:11]

# ---------- –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –≤—ã–∑–æ–≤—ã –∏–∑ Flask ----------
def find_and_describe(query: str, lang: str = "ru"):
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –∏—â–µ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ {'label','descr','text','url'}"""
    hits = search_entities(query, lang)
    if not hits:
        return []
    results = []
    for h in hits:
        results.append({"label": h["label"],
                        "descr": h["descr"],
                        "text": free_text_description(h["qid"], lang),
                        "url": WIKIDATA_ITEM.format(qid=h["qid"])})
    return results