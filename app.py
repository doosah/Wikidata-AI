# app.py  (—Å—Å—ã–ª–∫–∏ –∏ –∫–Ω–æ–ø–∫–∞ ¬´–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë¬ª —Ä–∞–±–æ—Ç–∞—é—Ç)
import json
from flask import Flask, render_template, request, jsonify, session
import spacy
from utils.wikidata_helpers import find_and_describe

app = Flask(__name__)
app.secret_key = "super_secret_key_123"

LANGUAGES = {"ru": "–†—É—Å—Å–∫–∏–π", "en": "English", "zh": "‰∏≠Êñá"}
nlp_ru = spacy.load("ru_core_news_sm")
nlp_en = spacy.load("en_core_web_sm")

@app.route("/")
def index():
    lang = session.get("lang") or request.accept_languages.best_match(LANGUAGES.keys()) or "ru"
    session["lang"] = lang
    return render_template("index.html", lang=lang, languages=LANGUAGES)

@app.route("/set_lang/<lang>")
def set_lang(lang):
    if lang in LANGUAGES:
        session["lang"] = lang
    return jsonify({"status": "ok"})

@app.route("/ask", methods=["POST"])
def ask():
    data     = request.get_json() or {}
    question = data.get("question", "").strip()
    lang     = session.get("lang", "ru")

    if not question:
        return jsonify({"answer": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å."})

    nlp   = nlp_ru if lang == "ru" else nlp_en
    doc   = nlp(question)
    query = next((ent.text for ent in doc.ents if ent.label_ in {"PER", "ORG", "LOC"}), question)
    found = find_and_describe(query, lang)

    if not found:
        return jsonify({"answer": "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."})

    if len(found) == 1:
        text = found[0]["text"]
        more = False
    else:
        show = found[:3]
        rest = found[3:]
        lines = ["–Ø –Ω–∞—à—ë–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤:\n"]
        for f in show:
            lines.append(f"‚Ä¢ **{f['label']}** ‚Äî {f['descr']}\n[üîó –ò—Å—Ç–æ—á–Ω–∏–∫]({f['url']})")
        if rest:
            lines.append(f"\n... –∏ –µ—â—ë {len(rest)}. –ù–∞–∂–º–∏ ¬´–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë¬ª.")
        text = "\n".join(lines)
        more = bool(rest)

    return jsonify({"answer": text, "more": more, "question": question})

@app.route("/more", methods=["POST"])
def more():
    data     = request.get_json() or {}
    question = data.get("question", "").strip()
    lang     = session.get("lang", "ru")
    found    = find_and_describe(question, lang)
    lines    = []
    for f in found:
        lines.append(f"‚Ä¢ **{f['label']}** ‚Äî {f['descr']}\n{f['text']}")
    full_text = "\n\n".join(lines)
    return jsonify({"answer": full_text, "more": False})

if __name__ == "__main__":
    app.run(debug=True, host="127.0.0.1", port=5000)
# –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞
if __name__ != "__main__":
    import spacy
    nlp_ru = spacy.load("ru_core_news_sm")
    nlp_en = spacy.load("en_core_web_sm")